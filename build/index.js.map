{"version":3,"sources":["webpack://MyLibrary/webpack/universalModuleDefinition","webpack://MyLibrary/webpack/bootstrap","webpack://MyLibrary/./src/lib/index.ts","webpack://MyLibrary/webpack/runtime/define property getters","webpack://MyLibrary/webpack/runtime/hasOwnProperty shorthand","webpack://MyLibrary/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","self","Suit","Rank","CardSequenceKind","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Play","player","cards","Card","rank","Ace","suit","Hearts","this","Player","name","order","undefined","Round","currentPlayer","activePlayers","outPlayers","GameState","discardPile","playersIn","playersOut","message","error","orderByCardRank","a","b","orderByPlayerOrder","dealCards","deck","players","length","Error","array","randomIndex","currentIndex","Math","floor","random","shuffle","forEach","splice","enumKeys","keys","filter","k","Number","isNaN","createDeck","push","getPlayersCards","map","p","reduce","all","current","getNextPlayer","index","sort","indexOf","findRuns","sorted","currentSeq","sequences","card","removeCardsFromPlayer","c","transitionState","command","nextState"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MyLibrary\"] = factory();\n\telse\n\t\troot[\"MyLibrary\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","import \"./index.css\";\n\nexport enum Suit {\n  Hearts = 'hearts',\n  Diamonds = 'diamonds',\n  Clubs = 'clubs',\n  Spades = 'spades'\n}\n\nexport enum Rank {\n  Two = 13, //twos are high in this game\n  Ace = 12,\n  King = 11,\n  Queen = 10,\n  Jack = 9,\n  Ten = 8,\n  Nine = 7,\n  Eight = 6,\n  Seven = 5,\n  Six = 4,\n  Five = 3,\n  Four = 2,\n  Three = 1\n}\n\nexport enum CardSequenceKind {\n  None = 'none',\n\n  OneOfAKind = 'one of a kind',\n  TwoOfAKind = 'two of a kind',\n  ThreeOfAKind = 'three of a kind',\n  FourOfAKind = 'four of a kind',\n\n  RunOfThree = 'run of three',\n  RunOfFour = 'run of four',\n  RunOfFive = 'run of five',\n  RunOfSix = 'run of six',\n  RunOfSeven = 'run of seven',\n  RunOfEight = 'run of eight',\n  RunOfNine = 'run of nine',\n  RunOfTen = 'run of ten',\n  RunOfEleven = 'run of eleven',\n  RunOfTwelve = 'run of twelve',\n  RunOfThirteen = 'run of thirteen',\n\n  RunOfThreePairs = 'run of three pairs',\n  RunOfFourPairs = 'run of four pairs',\n  RunOfFivePairs = 'run of five pairs',\n  RunOfSixPairs = 'run of six pairs',\n\n  RunOfThreeTriples = 'run of three triples',\n  RunOfFourTriples = 'run of four triples',\n}\n\nexport class Play {\n  /** @description falsy cards indicates player passes */\n  constructor(public player: Player, public cards: CardSequence) {\n\n  }\n}\nexport class Card {\n  constructor(\n    public rank: Rank = Rank.Ace,\n    public suit: Suit = Suit.Hearts) { }\n\n  toString() {\n    return `${this.rank} of ${this.suit}`;\n  }\n}\n\n/**  */\nexport type CardSequence = Card[];\n\nexport type Deck = Card[];\nexport type DiscardPile = Card[];\nexport class Player {\n  constructor(\n    public name = 'player',\n    public order: number = 0,\n    public cards: Card[] = undefined) { }\n}\nexport class Round {\n  constructor(\n    public currentPlayer: Player,\n    public activePlayers: Player[],\n    public outPlayers: Player[],\n    public cards: Card[]) { }\n}\n\nexport class GameState {\n  constructor(\n    public currentPlayer: Player,\n    public discardPile: CardSequence[],\n    public playersIn: Player[],\n    public playersOut: Player[],\n    public message: string,\n    public error: string) {\n  }\n}\n\nfunction orderByCardRank(a: Card, b: Card) {\n  if (a.rank > b.rank)\n    return 1;\n  else if (a.rank < b.rank)\n    return -1;\n  return 0;\n}\n\nfunction orderByPlayerOrder(a: Player, b: Player) {\n  if (a.order > b.order)\n    return 1;\n  else if (a.order < b.order)\n    return -1;\n  return 0;\n}\n\nfunction shuffle(array: any[]) {\n  let currentIndex = array.length;\n  let randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nfunction dealCards(deck: Deck, players: Player[]) {\n  if (players.length > 4 || players.length < 2) {\n    throw new Error('invalid Player length');\n  }\n  shuffle(deck);\n  players.forEach(player => player.cards = deck.splice(0, 13));\n}\n\nfunction enumKeys<O extends Record<string, unknown>, K extends keyof O = keyof O>(obj: O): K[] {\n  return Object.keys(obj).filter(k => Number.isNaN(+k)) as K[];\n}\n\nexport function createDeck(): Deck {\n  const deck = [];\n  for (const suit of enumKeys(Suit)) {\n    for (const rank of enumKeys(Rank)) {\n      deck.push({ suit: Suit[suit], rank: Rank[rank] });\n    }\n  }\n  return deck;\n}\n\nexport function getPlayersCards(players: Player[]) {\n  return players.map(p => p.cards).reduce((all, current) => [...all, ...current]);\n}\n\nexport function getNextPlayer(current: Player, players: Player[]) {\n  const sorted = [...players].sort(orderByPlayerOrder);\n  const index = sorted.indexOf(current);\n  if (index === -1) throw new Error('Player not found');\n  return index === players.length - 1 ? players[0] : players[index + 1];\n}\n\nexport function findRuns(cards: CardSequence): CardSequence[] {\n  const sorted = [...cards].sort(orderByCardRank);\n  let currentSeq: CardSequence = [];\n  const sequences: CardSequence[] = [currentSeq];\n  sorted.forEach(card => {\n    if (currentSeq.length === 0 ||\n      currentSeq[currentSeq.length-1].rank + 1 === card.rank) {\n      //theres no current sequence\n      //or the card does sequentially follows the curr seq\n      currentSeq.push(card);\n    } else {\n      // current sequence is broken, add it to the return list\n      sequences.push(currentSeq);\n\n      // current card is start of new sequence\n      currentSeq = [card];\n    }\n  });\n  return sequences;\n}\n\nfunction removeCardsFromPlayer(player: Player, cards: CardSequence): CardSequence {\n  cards.forEach(c => {\n    const index = player.cards.indexOf(c);\n    if (index > -1)\n      player.cards.splice(index, 1);\n    else\n      throw new Error(`Player does not have card ${c}`);\n  });\n  return cards;\n}\n\nexport function transitionState(current: GameState = undefined, command: Play = undefined): GameState {\n  if (!current) {\n    // no previous state so generate a new game\n    const players = [new Player('a', 0), new Player('a', 1), new Player('a', 2), new Player('a', 3)];\n    const nextState: GameState = {\n      error: '',\n      discardPile: [],\n      currentPlayer: players[0],\n      playersIn: players,\n      playersOut: [],\n      message: `New Game! Waiting on ${players[0]}`\n    };\n    dealCards(createDeck(), nextState.playersIn);\n    return nextState;\n  }\n\n  if (current.currentPlayer !== command.player) {\n    return { ...current, error: `It is not ${command.player.name}'s turn. It is ${current.currentPlayer.name}'s turn.` }\n  }\n\n  if (!command.cards) {\n    // no cards indicates Player passes and is out for remainder of the Round\n    const nextState = {\n      ...current,\n      error: '',\n      playersIn: current.playersIn.filter(p => p !== command.player), //remove current player from round\n      playersOut: [...current.playersOut, command.player], //add player to list of passed players\n    }\n\n    // current player is the next player of the remaining players in the round\n    nextState.currentPlayer = getNextPlayer(command.player, nextState.playersIn);\n\n    nextState.message = `${command.player.name} passes. Waiting on ${nextState.currentPlayer.name}`;\n    return nextState;\n  }\n\n  if (current.playersIn.length === 1 &&\n    getPlayersCards([...current.playersIn, ...current.playersOut]).length === 0) {\n    // only one player in the round and all cards played: game over\n    const nextState = {\n      ...current,\n      error: '',\n      discardPile: [...current.discardPile, removeCardsFromPlayer(command.player, command.cards)],\n      playersIn: current.playersIn.filter(p => p !== command.player),\n      playersOut: [...current.playersOut, command.player],\n      message: `${command.player.name} won!`\n    };\n    return nextState;\n  }\n\n  if (current.playersIn.length === 1) {\n    // only one player in the round -> that player won round and can start next round w/ any sequence kind\n    const nextState = {\n      ...current,\n      error: '',\n      discardPile: [...current.discardPile, removeCardsFromPlayer(command.player, command.cards)],\n      currentPlayer: command.player, //winner of round remains current player to lead round\n      playersIn: [current.currentPlayer, ...current.playersOut], //all players in at start of round\n      playersOut: [] as Player[], // no players are out at start of round\n    };\n    nextState.message = `${command.player.name} won round. Waiting on ${nextState.currentPlayer.name} to start new round.`;\n    return nextState;\n  }\n\n  // current player played a sequence, advance to next player\n  const nextState = {\n    ...current,\n    error: '',\n    discardPile: [...current.discardPile, removeCardsFromPlayer(command.player, command.cards)],\n    currentPlayer: getNextPlayer(command.player, current.playersIn)\n  };\n  return nextState;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}