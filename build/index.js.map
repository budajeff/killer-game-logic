{"version":3,"sources":["webpack://KillerGameLogic/webpack/universalModuleDefinition","webpack://KillerGameLogic/webpack/bootstrap","webpack://KillerGameLogic/webpack/runtime/define property getters","webpack://KillerGameLogic/webpack/runtime/hasOwnProperty shorthand","webpack://KillerGameLogic/webpack/runtime/make namespace object","webpack://KillerGameLogic/./src/lib/logic.ts"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Suit","Rank","CardSequenceKind","PlayerStatus","cardToString","card","rank","Two","Ace","King","Queen","Jack","Ten","Nine","Eight","Seven","Six","Five","Four","Three","getRankText","suit","getSuitText","cardSequenceToKind","cards","every","c","length","OneOfAKind","TwoOfAKind","ThreeOfAKind","FourOfAKind","Unknown","ofAKindSequenceToKind","run","findRuns","find","s","RunOfThree","RunOfFour","RunOfFive","RunOfSix","RunOfSeven","RunOfEight","RunOfNine","RunOfTen","RunOfEleven","RunOfTwelve","RunOfThirteen","runSequenceToKind","cardSequenceToString","cardText","sort","orderByCardRank","reverse","reduce","textList","index","PlayerKind","Play","playerName","undefined","Card","Hearts","Player","name","kind","AI","order","status","InRound","current","this","getPlayer","state","players","p","getActivePlayers","filter","getPassedPlayers","PassedRound","setCurrentPlayer","player","forEach","getCurrentPlayer","isGameOver","some","Discard","GameState","roundKind","discardPile","message","error","a","b","suitToNumber","Diamonds","Clubs","Spades","orderByPlayerOrder","orderBy","orderByProp","asc","compareCardSequences","aKind","bKind","Error","aHighest","bHighest","aNum","bNum","compareSuit","dealCards","deck","array","randomIndex","currentIndex","Math","floor","random","shuffle","splice","deepClone","JSON","parse","stringify","enumKeys","keys","k","Number","isNaN","createDeck","push","getNextPlayer","currentPlayerName","sorted","indexOf","findOfAKinds","currentSeq","sequences","shift","seq","cardsCopy","currentRank","nextCard","nextCardIndex","findSequences","findSequencesByKind","removeCardsFromPlayer","cs","getMostRecentDiscard","transitionStateAuto","onStateChanged","onContinue","currentPlayer","transitionState","currentPlayerSequences","sequenceToBeat","command","Human","nextState","winners","discard","commandPlayer"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"KillerGameLogic\"] = factory();\n\telse\n\t\troot[\"KillerGameLogic\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"./index.css\";\n\nexport enum Suit {\n  Hearts = \"hearts\",\n  Diamonds = \"diamonds\",\n  Clubs = \"clubs\",\n  Spades = \"spades\",\n}\n\nfunction getSuitText(suit: Suit) {\n  switch (suit) {\n    case \"hearts\":\n      return \"\\u2665\";\n    case \"diamonds\":\n      return \"\\u2666\";\n    case \"clubs\":\n      return \"\\u2667\";\n    case \"spades\":\n      return \"\\u2660\";\n    default:\n      return \"?\";\n  }\n}\n\nfunction getRankText(rank: Rank) {\n  switch (rank) {\n    case Rank.Two:\n      return \"2\";\n    case Rank.Ace:\n      return \"A\";\n    case Rank.King:\n      return \"K\";\n    case Rank.Queen:\n      return \"Q\";\n    case Rank.Jack:\n      return \"J\";\n    case Rank.Ten:\n      return \"10\";\n    case Rank.Nine:\n      return \"9\";\n    case Rank.Eight:\n      return \"8\";\n    case Rank.Seven:\n      return \"7\";\n    case Rank.Six:\n      return \"6\";\n    case Rank.Five:\n      return \"5\";\n    case Rank.Four:\n      return \"4\";\n    case Rank.Three:\n      return \"3\";\n    default:\n      return \"?\";\n  }\n}\n\nexport function cardToString(card: Card) {\n  return getRankText(card.rank) + getSuitText(card.suit);\n}\n\nexport enum Rank {\n  Two = 13, //twos are high in this game\n  Ace = 12,\n  King = 11,\n  Queen = 10,\n  Jack = 9,\n  Ten = 8,\n  Nine = 7,\n  Eight = 6,\n  Seven = 5,\n  Six = 4,\n  Five = 3,\n  Four = 2,\n  Three = 1,\n}\n\nexport enum CardSequenceKind {\n  Unknown = \"unknown\",\n\n  OneOfAKind = \"one of a kind\",\n  TwoOfAKind = \"two of a kind\",\n  ThreeOfAKind = \"three of a kind\",\n  FourOfAKind = \"four of a kind\",\n\n  RunOfThree = \"run of three\",\n  RunOfFour = \"run of four\",\n  RunOfFive = \"run of five\",\n  RunOfSix = \"run of six\",\n  RunOfSeven = \"run of seven\",\n  RunOfEight = \"run of eight\",\n  RunOfNine = \"run of nine\",\n  RunOfTen = \"run of ten\",\n  RunOfEleven = \"run of eleven\",\n  RunOfTwelve = \"run of twelve\",\n  RunOfThirteen = \"run of thirteen\",\n\n  RunOfThreePairs = \"run of three pairs\",\n  RunOfFourPairs = \"run of four pairs\",\n  RunOfFivePairs = \"run of five pairs\",\n  RunOfSixPairs = \"run of six pairs\",\n\n  RunOfThreeTriples = \"run of three triples\",\n  RunOfFourTriples = \"run of four triples\",\n}\n\nexport function cardSequenceToKind(cards: CardSequence): CardSequenceKind {\n  if (cards.every((c) => c.rank === cards[0].rank)) {\n    return ofAKindSequenceToKind(cards.length);\n  } else {\n    return runSequenceToKind(cards);\n  }\n}\n\nexport function cardSequenceToString(cards: CardSequence): string {\n  const sortedCards = [...cards].sort(orderByCardRank).reverse();\n  const cardText = sortedCards.reduce(\n    (textList, c, index) =>\n    (textList +=\n      cardToString(c) + (index === textList.length - 1 ? \"\" : \" \")),\n    \"\"\n  );\n  return `${cardText} (${cardSequenceToKind(cards)})`;\n}\n\nfunction ofAKindSequenceToKind(length: number): CardSequenceKind {\n  switch (length) {\n    case 1:\n      return CardSequenceKind.OneOfAKind;\n    case 2:\n      return CardSequenceKind.TwoOfAKind;\n    case 3:\n      return CardSequenceKind.ThreeOfAKind;\n    case 4:\n      return CardSequenceKind.FourOfAKind;\n    default:\n      return CardSequenceKind.Unknown;\n  }\n}\n\nfunction runSequenceToKind(cards: CardSequence): CardSequenceKind {\n  const runs = findRuns(cards);\n  const run = runs.find((s) => s.length === cards.length);\n  if (!run) {\n    return CardSequenceKind.Unknown;\n  }\n\n  //runs must be at least three cards long\n  switch (run.length) {\n    case 3:\n      return CardSequenceKind.RunOfThree;\n    case 4:\n      return CardSequenceKind.RunOfFour;\n    case 5:\n      return CardSequenceKind.RunOfFive;\n    case 6:\n      return CardSequenceKind.RunOfSix;\n    case 7:\n      return CardSequenceKind.RunOfSeven;\n    case 8:\n      return CardSequenceKind.RunOfEight;\n    case 9:\n      return CardSequenceKind.RunOfNine;\n    case 10:\n      return CardSequenceKind.RunOfTen;\n    case 11:\n      return CardSequenceKind.RunOfEleven;\n    case 12:\n      return CardSequenceKind.RunOfTwelve;\n    case 13:\n      return CardSequenceKind.RunOfThirteen;\n    default:\n      return CardSequenceKind.Unknown;\n  }\n}\n\nexport enum PlayerStatus {\n  InRound = \"in\",\n  PassedRound = \"passed\",\n}\n\nexport class Play {\n  /** @description falsy cards indicates player passes */\n  constructor(\n    public playerName: string,\n    public cards: CardSequence = undefined\n  ) { }\n}\nexport class Card {\n  constructor(public rank: Rank = Rank.Ace, public suit: Suit = Suit.Hearts) { }\n}\n\n/**  */\nexport type CardSequence = Card[];\n\nexport type Deck = Card[];\nexport type DiscardPile = CardSequence[];\n\nexport enum PlayerKind {\n  Human = \"human\",\n  AI = \"ai\",\n}\nexport class Player {\n  constructor(\n    public name = \"player\",\n    public kind = PlayerKind.AI,\n    public order: number = 0,\n    public cards: Card[] = undefined,\n    public status = PlayerStatus.InRound,\n    public current = false\n  ) { }\n\n  public toString() {\n    return `Player ${this.name} with ${this?.cards?.length} cards remaining`;\n  }\n}\nexport function getPlayer(state: GameState, name: string) {\n  return state.players.find((p) => p.name === name);\n}\nexport function getActivePlayers(state: GameState) {\n  return state.players.filter((p) => p.status === PlayerStatus.InRound);\n}\nexport function getPassedPlayers(state: GameState) {\n  return state.players.filter((p) => p.status === PlayerStatus.PassedRound);\n}\nexport function setCurrentPlayer(state: GameState, player: Player) {\n  state.players.forEach((p) => (p.current = false));\n  state.players.find((p) => p.name === player.name).current = true;\n}\nexport function getCurrentPlayer(state: GameState): Player | undefined {\n  return state.players.find((p) => p.current);\n}\nexport function isGameOver(state: GameState) {\n  return state.players.some((p) => p.cards.length === 0);\n}\n\nexport class Discard {\n  constructor(public playerName: string, public cards: CardSequence) { }\n}\nexport class GameState {\n  constructor(\n    public players: Player[],\n    public roundKind: CardSequenceKind | undefined,\n    public discardPile: Discard[],\n    public message: string,\n    public error: string\n  ) { }\n}\n\nfunction orderByCardRank(a: Card, b: Card) {\n  if (a.rank > b.rank) return 1;\n  else if (a.rank < b.rank) return -1;\n  return 0;\n}\n\nfunction suitToNumber(suit: Suit) {\n  switch (suit) {\n    case Suit.Hearts:\n      return 3;\n    case Suit.Diamonds:\n      return 2;\n    case Suit.Clubs:\n      return 1;\n    case Suit.Spades:\n      return 0;\n  }\n}\nfunction compareSuit(a: Suit, b: Suit) {\n  const aNum = suitToNumber(a);\n  const bNum = suitToNumber(b);\n  return aNum === bNum ? 0 : aNum > bNum ? 1 : -1;\n}\n\nexport function orderByPlayerOrder(a: Player, b: Player) {\n  if (a.order > b.order) return 1;\n  else if (a.order < b.order) return -1;\n  return 0;\n}\n\nexport function orderBy(orderByProp: string, asc = true) {\n  return (a: any, b: any) => {\n    if (a[orderByProp] > b[orderByProp]) return asc ? 1 : -1;\n    else if (a[orderByProp] < b[orderByProp]) return asc ? -1 : 1;\n    return 0;\n  };\n}\n\nexport function compareCardSequences(a: CardSequence, b: CardSequence) {\n  const aIsGreater = 1;\n  const bIsGreater = -1;\n\n  const aKind = cardSequenceToKind(a);\n  const bKind = cardSequenceToKind(b);\n\n  if (aKind == CardSequenceKind.FourOfAKind &&\n    bKind != CardSequenceKind.FourOfAKind) {\n    return aIsGreater; //four of kind/killer trumps all other plays\n  }\n\n  if (bKind == CardSequenceKind.FourOfAKind &&\n    aKind != CardSequenceKind.FourOfAKind) {\n    return bIsGreater; //four of kind/killer trumps all other plays\n  }\n\n  if (cardSequenceToKind(a) !== cardSequenceToKind(b)) {\n    throw new Error(\n      `Cannot compare ${cardSequenceToKind(a)} to ${cardSequenceToKind(b)}`\n    );\n  }\n  const aHighest = [...a].sort(orderByCardRank).reverse()[0];\n  const bHighest = [...b].sort(orderByCardRank).reverse()[0];\n\n  if (aHighest.rank === bHighest.rank)\n    return compareSuit(aHighest.suit, bHighest.suit);\n  return aHighest.rank > bHighest.rank ? aIsGreater : bIsGreater;\n}\n\nfunction shuffle(array: any[]) {\n  let currentIndex = array.length;\n  let randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\nfunction dealCards(deck: Deck, players: Player[]) {\n  if (players.length > 4 || players.length < 2) {\n    throw new Error(\"invalid Player length\");\n  }\n  shuffle(deck);\n  players.forEach((player) => (player.cards = deck.splice(0, 13)));\n}\n\nfunction deepClone<TInstance>(state: TInstance): TInstance {\n  if (typeof state === \"undefined\") return undefined;\n  if (typeof state !== \"object\")\n    throw new Error(`Only undefined and object are supported.`);\n  const clone = JSON.parse(JSON.stringify(state));\n  return clone;\n}\n\nfunction enumKeys<\n  O extends Record<string, unknown>,\n  K extends keyof O = keyof O\n>(obj: O): K[] {\n  return Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[];\n}\n\nexport function createDeck(): Deck {\n  const deck = [];\n  for (const suit of enumKeys(Suit)) {\n    for (const rank of enumKeys(Rank)) {\n      deck.push({ suit: Suit[suit], rank: Rank[rank] });\n    }\n  }\n  return deck;\n}\n\nexport function getPlayersCards(players: Player[]) {\n  return players\n    .map((p) => p.cards)\n    .reduce((all, current) => [...all, ...current]);\n}\n\n/** Get the next player who is still in the current round (who has not Passed) */\nexport function getNextPlayer(state: GameState, currentPlayerName: string) {\n  const sorted = [...state.players].sort(orderByPlayerOrder);\n  let index = sorted.indexOf(sorted.find((p) => p.name === currentPlayerName));\n  do {\n    if (index === sorted.length - 1) {\n      index = 0; //loop back to beginning\n    } else {\n      index = index + 1;\n    }\n    if (sorted[index].status === PlayerStatus.InRound) {\n      return sorted[index]; //return the next player who's still in this round\n    }\n  } while (sorted[index].name !== currentPlayerName); //done once we're back at the current player\n  return undefined; //perhaps no one is left in the round?\n}\n\nexport function findOfAKinds(cards: CardSequence): CardSequence[] {\n  const sorted = [...cards].sort(orderByCardRank);\n  let currentSeq: CardSequence = [];\n  const sequences: CardSequence[] = [currentSeq];\n  while (sorted.length > 0) {\n    const card = sorted.shift();\n    if (\n      currentSeq.length === 0 ||\n      currentSeq[currentSeq.length - 1].rank === card.rank\n    ) {\n      currentSeq.push(card);\n    } else {\n      currentSeq = [card];\n      sequences.push(currentSeq);\n    }\n  }\n  return sequences;\n}\n\nexport function findRuns(cards: CardSequence): CardSequence[] {\n  const sequences: CardSequence[] = [];\n\n  cards.forEach((card) => {\n    //assume each card could be the start of a run\n    const seq = [card];\n    const cardsCopy = [...cards];\n    let currentRank = card.rank;\n    while (cardsCopy.find((c) => c.rank === currentRank + 1)) {\n      const nextCard = cardsCopy.find((c) => c.rank === currentRank + 1);\n      const nextCardIndex = cardsCopy.indexOf(nextCard);\n      seq.push(cardsCopy.splice(nextCardIndex, 1)[0]);\n      currentRank++;\n    }\n    if (seq.length > 2) {\n      //runs must be at least three cards long\n      sequences.push(seq);\n    }\n  });\n  return sequences;\n}\n\nexport function findSequences(cards: CardSequence) {\n  return [...findRuns(cards), ...findOfAKinds(cards)];\n}\n\nexport function findSequencesByKind(\n  cards: CardSequence,\n  kind: CardSequenceKind\n): CardSequence[] {\n  switch (kind) {\n    case CardSequenceKind.OneOfAKind:\n      return findOfAKinds(cards).filter((c) => c.length === 1);\n    case CardSequenceKind.TwoOfAKind:\n      return findOfAKinds(cards).filter((c) => c.length === 2);\n    case CardSequenceKind.ThreeOfAKind:\n      return findOfAKinds(cards).filter((c) => c.length === 3);\n    case CardSequenceKind.FourOfAKind:\n      return findOfAKinds(cards).filter((c) => c.length === 4);\n    case CardSequenceKind.RunOfThree:\n      return findRuns(cards).filter((c) => c.length === 3);\n    case CardSequenceKind.RunOfFour:\n      return findRuns(cards).filter((c) => c.length === 4);\n    case CardSequenceKind.RunOfFive:\n      return findRuns(cards).filter((c) => c.length === 5);\n    case CardSequenceKind.RunOfSix:\n      return findRuns(cards).filter((c) => c.length === 6);\n    case CardSequenceKind.RunOfSeven:\n      return findRuns(cards).filter((c) => c.length === 7);\n    case CardSequenceKind.RunOfEight:\n      return findRuns(cards).filter((c) => c.length === 8);\n    case CardSequenceKind.RunOfNine:\n      return findRuns(cards).filter((c) => c.length === 9);\n    case CardSequenceKind.RunOfTen:\n      return findRuns(cards).filter((c) => c.length === 10);\n    case CardSequenceKind.RunOfEleven:\n      return findRuns(cards).filter((c) => c.length === 11);\n    case CardSequenceKind.RunOfTwelve:\n      return findRuns(cards).filter((c) => c.length === 12);\n    case CardSequenceKind.RunOfThirteen:\n      return findRuns(cards).filter((c) => c.length === 13);\n    default:\n      return [];\n  }\n}\n\nfunction removeCardsFromPlayer(\n  state: GameState,\n  playerName: string,\n  cards: CardSequence\n): CardSequence {\n  const player = getPlayer(state, playerName);\n\n  cards.forEach((cs) => {\n    const card = player.cards.find(\n      (c) => c.rank === cs.rank && c.suit === cs.suit\n    );\n    const index = player.cards.indexOf(card);\n    if (index > -1) player.cards.splice(index, 1);\n    else throw new Error(`Player does not have card ${cardToString(cs)}`);\n  });\n  return cards;\n}\n\nfunction getMostRecentDiscard(state: GameState): Discard {\n  return state.discardPile.length === 0\n    ? undefined\n    : state.discardPile[state.discardPile.length - 1];\n}\n\n/** Advances the game state automatically until onContinue() returns false (e.g., when it's a human's turn or if there's an error)  */\nexport function transitionStateAuto(\n  state: GameState,\n  onStateChanged: (state: GameState) => void = (state) => { },\n  onContinue: (state: GameState) => boolean = (state) => {\n    return !state.error;\n  }\n): GameState {\n  while (!isGameOver(state) && onContinue(state)) {\n    const currentPlayer = getCurrentPlayer(state);\n\n    if (state.discardPile.length === 0) {\n      // first play of the game\n      // current play should play their longest sequence\n      const sequences = findSequences(currentPlayer.cards);\n      sequences.sort(orderBy(\"length\", false));\n      state = transitionState(\n        state,\n        new Play(currentPlayer.name, sequences[0])\n      );\n      onStateChanged(state);\n    } else if (currentPlayer.name === getMostRecentDiscard(state).playerName) {\n      // current player was last to discard which means they won the round\n      // can start next round w/ any discard\n      const currentPlayerSequences = findSequences(currentPlayer.cards).sort(\n        orderBy(\"length\", false)\n      );\n      state = transitionState(\n        state,\n        new Play(currentPlayer.name, currentPlayerSequences[0])\n      );\n      onStateChanged(state);\n    } else {\n      const sequenceToBeat = cardSequenceToKind(\n        getMostRecentDiscard(state).cards\n      );\n      //find player sequences of the proper kind that are greater than the discard\n      const currentPlayerSequences = findSequencesByKind(\n        currentPlayer.cards,\n        sequenceToBeat\n      ).filter(\n        (s) => compareCardSequences(s, getMostRecentDiscard(state).cards) === 1\n      );\n\n      if (currentPlayerSequences.length === 0) {\n        state = transitionState(state, new Play(currentPlayer.name, [])); //pass\n      } else {\n        state = transitionState(\n          state,\n          new Play(currentPlayer.name, currentPlayerSequences[0])\n        ); //play\n      }\n      onStateChanged(state);\n    }\n  }\n  return state;\n}\n\n/**\n *\n *\n *\n * @param state\n * @param command\n * @returns\n */\nexport function transitionState(\n  state: GameState = undefined,\n  command: Play = undefined\n): GameState {\n  command = deepClone(command);\n\n  if (!state) {\n    // no previous state so generate a new game\n    const players = [\n      new Player(\"A\", PlayerKind.Human, 0),\n      new Player(\"B\", PlayerKind.AI, 1),\n      new Player(\"C\", PlayerKind.AI, 2),\n      new Player(\"D\", PlayerKind.AI, 3),\n    ];\n    const nextState: GameState = {\n      players,\n      error: \"\",\n      roundKind: undefined,\n      discardPile: [],\n      message: `New Game! Waiting on ${players[0]}`,\n    };\n    setCurrentPlayer(nextState, nextState.players[0]);\n    dealCards(createDeck(), nextState.players);\n    nextState.players[0].current = true;\n    return nextState;\n  }\n\n  //verify game is not over\n  const winners = state.players.filter((p) => p.cards.length === 0);\n  if (winners.length > 0) {\n    return {\n      ...deepClone(state),\n      error: `${winners[0].name} won this game.`,\n    };\n  }\n\n  // verify current player\n  if (getCurrentPlayer(state).name !== command.playerName) {\n    return {\n      ...deepClone(state),\n      error: `It is not ${command.playerName}'s turn. It is ${getCurrentPlayer(state).name\n        }'s turn.`,\n    };\n  }\n\n  // verify card sequence\n  if (\n    command?.cards?.length > 0 &&\n    cardSequenceToKind(command.cards) === CardSequenceKind.Unknown\n  ) {\n    return {\n      ...deepClone(state),\n      message: \"\",\n      error: `Unknown card sequence: ${cardSequenceToString(command.cards)}`,\n    };\n  }\n\n  // no cards in command indicates Player passes and is out for remainder of the Round\n  if (!command.cards || command.cards.length === 0) {\n    const nextState = {\n      ...deepClone(state),\n      error: \"\",\n    };\n\n    // set Passed status on player\n    nextState.players.find((p) => p.name === command.playerName).status =\n      PlayerStatus.PassedRound;\n\n    // current player is the next player of the remaining players in the round\n    setCurrentPlayer(\n      nextState,\n      getNextPlayer(nextState, getCurrentPlayer(nextState).name)\n    );\n\n    nextState.message = `${command.playerName} passes. Waiting on ${getCurrentPlayer(nextState).name\n      }`;\n\n    // one active player means they can lead new round w/ anything\n    if (getActivePlayers(nextState).length === 1) {\n      nextState.roundKind = undefined;\n    }\n    return nextState;\n  }\n\n  // current player is leading a new round\n  if (state.roundKind === undefined) {\n    const nextState: GameState = {\n      ...deepClone(state),\n      error: \"\",\n      roundKind: cardSequenceToKind(command.cards),\n      discardPile: [...state.discardPile],\n    };\n    const discard = new Discard(\n      command.playerName,\n      removeCardsFromPlayer(nextState, command.playerName, command.cards)\n    );\n    nextState.discardPile.push(discard);\n\n    // check for end game after removing cards from the current player\n    const commandPlayer = getPlayer(nextState, command.playerName);\n    if (commandPlayer.cards.length === 0) {\n      nextState.message = `${commandPlayer.name} played ${cardSequenceToString(\n        command.cards\n      )}, has no cards left, and is the winner. `;\n      return nextState;\n    }\n\n    //all players are In the new round\n    nextState.players.forEach((p) => (p.status = PlayerStatus.InRound));\n\n    // current player is the next player\n    setCurrentPlayer(nextState, getNextPlayer(nextState, command.playerName));\n\n    nextState.message = `${command.playerName\n      } lead new round with ${cardSequenceToString(command.cards)}. Waiting on ${getCurrentPlayer(nextState).name\n      }`;\n    return nextState;\n  }\n\n  // verify cards are of the same kind as the current round (or a killer/4 of a kind)\n  if (\n    state.roundKind &&\n    getActivePlayers(state).length > 1 &&\n    (cardSequenceToKind(command.cards) !== state.roundKind &&\n      cardSequenceToKind(command.cards) !== CardSequenceKind.FourOfAKind)\n  ) {\n    return {\n      ...deepClone(state),\n      message: \"\",\n      error: `${command.playerName\n        } cannot play card sequence ${cardSequenceToString(\n          command.cards\n        )} because the current round is ${state.roundKind}`,\n    };\n  }\n\n  if (getActivePlayers(state).length === 1) {\n    // only one player in the round -> that player won round and can start next round w/ any sequence kind\n    //winner of round remains current player to lead round\n    const nextState: GameState = {\n      ...deepClone(state),\n      error: \"\",\n      roundKind: undefined,\n      discardPile: [...state.discardPile],\n    };\n    const discard = new Discard(\n      command.playerName,\n      removeCardsFromPlayer(nextState, command.playerName, command.cards)\n    );\n    nextState.discardPile.push(discard);\n\n    nextState.players.forEach((p) => (p.status = PlayerStatus.InRound));\n\n    // current player is unchanged in this case.\n    // winner of this round leads the new round\n\n    nextState.message = `${command.playerName} played ${cardSequenceToString(\n      command.cards\n    )} and won the round. Waiting on ${getCurrentPlayer(nextState).name\n      } to start new round.`;\n\n    return nextState;\n  }\n\n  // current player played a sequence, advance to next player\n  // verify card sequence in command is higher than the current card sequence\n  if (\n    getMostRecentDiscard(state) &&\n    compareCardSequences(getMostRecentDiscard(state).cards, command.cards) === 1\n  ) {\n    return {\n      ...deepClone(state),\n      message: \"\",\n      error: `Proposed play sequence ${cardSequenceToString(\n        command.cards\n      )} is less than the current sequence ${cardSequenceToString(\n        getMostRecentDiscard(state).cards\n      )}`,\n    };\n  }\n  const nextState: GameState = {\n    ...deepClone(state),\n    error: \"\",\n    discardPile: [...state.discardPile],\n  };\n  const discard = new Discard(\n    command.playerName,\n    removeCardsFromPlayer(nextState, command.playerName, command.cards)\n  );\n  nextState.discardPile.push(discard);\n\n  // check for end game after removing cards from the current player\n  const commandPlayer = getPlayer(nextState, command.playerName);\n  if (commandPlayer.cards.length === 0) {\n    nextState.message = `${commandPlayer.name} played ${cardSequenceToString(\n      command.cards\n    )}, has no cards left, and is the winner. `;\n  } else {\n    setCurrentPlayer(nextState, getNextPlayer(nextState, command.playerName));\n    nextState.message = `${commandPlayer.name} played ${cardSequenceToString(\n      command.cards\n    )}. Waiting on ${getCurrentPlayer(nextState).name}`;\n  }\n  return nextState;\n}\n"],"sourceRoot":""}