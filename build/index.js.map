{"version":3,"sources":["webpack://MyLibrary/webpack/universalModuleDefinition","webpack://MyLibrary/webpack/bootstrap","webpack://MyLibrary/./src/lib/index.ts","webpack://MyLibrary/webpack/runtime/define property getters","webpack://MyLibrary/webpack/runtime/hasOwnProperty shorthand","webpack://MyLibrary/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","self","Suit","Rank","CardSequenceKind","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Play","player","cards","undefined","Card","rank","Ace","suit","Hearts","this","Player","name","order","length","Round","currentPlayer","activePlayers","outPlayers","GameState","discardPile","playersIn","playersOut","message","error","orderByCardRank","a","b","orderByPlayerOrder","orderBy","orderByProp","asc","dealCards","deck","players","Error","array","randomIndex","currentIndex","Math","floor","random","shuffle","forEach","splice","enumKeys","keys","filter","k","Number","isNaN","createDeck","push","getPlayersCards","map","p","reduce","all","current","getNextPlayer","index","sort","indexOf","findOfAKinds","sorted","currentSeq","sequences","card","shift","findRuns","removeCardsFromPlayer","c","transitionState","command","nextState"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MyLibrary\"] = factory();\n\telse\n\t\troot[\"MyLibrary\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","import \"./index.css\";\n\nexport enum Suit {\n  Hearts = \"hearts\",\n  Diamonds = \"diamonds\",\n  Clubs = \"clubs\",\n  Spades = \"spades\",\n}\n\nexport enum Rank {\n  Two = 13, //twos are high in this game\n  Ace = 12,\n  King = 11,\n  Queen = 10,\n  Jack = 9,\n  Ten = 8,\n  Nine = 7,\n  Eight = 6,\n  Seven = 5,\n  Six = 4,\n  Five = 3,\n  Four = 2,\n  Three = 1,\n}\n\nexport enum CardSequenceKind {\n  None = \"none\",\n\n  OneOfAKind = \"one of a kind\",\n  TwoOfAKind = \"two of a kind\",\n  ThreeOfAKind = \"three of a kind\",\n  FourOfAKind = \"four of a kind\",\n\n  RunOfThree = \"run of three\",\n  RunOfFour = \"run of four\",\n  RunOfFive = \"run of five\",\n  RunOfSix = \"run of six\",\n  RunOfSeven = \"run of seven\",\n  RunOfEight = \"run of eight\",\n  RunOfNine = \"run of nine\",\n  RunOfTen = \"run of ten\",\n  RunOfEleven = \"run of eleven\",\n  RunOfTwelve = \"run of twelve\",\n  RunOfThirteen = \"run of thirteen\",\n\n  RunOfThreePairs = \"run of three pairs\",\n  RunOfFourPairs = \"run of four pairs\",\n  RunOfFivePairs = \"run of five pairs\",\n  RunOfSixPairs = \"run of six pairs\",\n\n  RunOfThreeTriples = \"run of three triples\",\n  RunOfFourTriples = \"run of four triples\",\n}\n\nexport class Play {\n  /** @description falsy cards indicates player passes */\n  constructor(\n    public player: Player,\n    public cards: CardSequence = undefined) {\n\n  }\n}\nexport class Card {\n  constructor(public rank: Rank = Rank.Ace, public suit: Suit = Suit.Hearts) {}\n\n  public toString() {\n    return `${this.rank} of ${this.suit}`;\n  }\n}\n\n/**  */\nexport type CardSequence = Card[];\n\nexport type Deck = Card[];\nexport type DiscardPile = Card[];\nexport class Player {\n  constructor(\n    public name = \"player\",\n    public order: number = 0,\n    public cards: Card[] = undefined) { }\n\n  public toString() {\n    return `Player ${this.name} with ${this?.cards?.length} cards remaining`;\n  }\n}\nexport class Round {\n  constructor(\n    public currentPlayer: Player,\n    public activePlayers: Player[],\n    public outPlayers: Player[],\n    public cards: Card[]\n  ) {}\n}\n\nexport class GameState {\n  constructor(\n    public currentPlayer: Player,\n    public discardPile: CardSequence[],\n    public playersIn: Player[],\n    public playersOut: Player[],\n    public message: string,\n    public error: string\n  ) {}\n}\n\nfunction orderByCardRank(a: Card, b: Card) {\n  if (a.rank > b.rank) return 1;\n  else if (a.rank < b.rank) return -1;\n  return 0;\n}\n\nfunction orderByPlayerOrder(a: Player, b: Player) {\n  if (a.order > b.order) return 1;\n  else if (a.order < b.order) return -1;\n  return 0;\n}\n\nexport function orderBy(orderByProp: string, asc = true) {\n  return (a: any, b: any) => {\n    if (a[orderByProp] > b[orderByProp])\n      return asc ? 1 : -1;\n    else if (a[orderByProp] < b[orderByProp])\n      return asc ? -1 : 1;\n    return 0;\n  }\n}\n\nfunction shuffle(array: any[]) {\n  let currentIndex = array.length;\n  let randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\nfunction dealCards(deck: Deck, players: Player[]) {\n  if (players.length > 4 || players.length < 2) {\n    throw new Error(\"invalid Player length\");\n  }\n  shuffle(deck);\n  players.forEach((player) => (player.cards = deck.splice(0, 13)));\n}\n\nfunction enumKeys<\n  O extends Record<string, unknown>,\n  K extends keyof O = keyof O\n>(obj: O): K[] {\n  return Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[];\n}\n\nexport function createDeck(): Deck {\n  const deck = [];\n  for (const suit of enumKeys(Suit)) {\n    for (const rank of enumKeys(Rank)) {\n      deck.push({ suit: Suit[suit], rank: Rank[rank] });\n    }\n  }\n  return deck;\n}\n\nexport function getPlayersCards(players: Player[]) {\n  return players\n    .map((p) => p.cards)\n    .reduce((all, current) => [...all, ...current]);\n}\n\nexport function getNextPlayer(current: Player, players: Player[]) {\n  const sorted = [...players].sort(orderByPlayerOrder);\n  const index = sorted.indexOf(current);\n  if (index === -1) throw new Error(\"Player not found\");\n  return index === players.length - 1 ? players[0] : players[index + 1];\n}\n\nexport function findOfAKinds(cards: CardSequence): CardSequence[] {\n  const sorted = [...cards].sort(orderByCardRank);\n  let currentSeq: CardSequence = [];\n  const sequences: CardSequence[] = [currentSeq];\n  while (sorted.length > 0) {\n    const card = sorted.shift();\n    if (currentSeq.length === 0 ||\n      currentSeq[currentSeq.length - 1].rank === card.rank) {\n      currentSeq.push(card);\n    } else {\n      currentSeq = [card];\n      sequences.push(currentSeq);\n    }\n  }\n  return sequences;\n}\n\nexport function findRuns(cards: CardSequence): CardSequence[] {\n  const sorted = [...cards].sort(orderByCardRank);\n  let currentSeq: CardSequence = [];\n  const sequences: CardSequence[] = [currentSeq];\n  sorted.forEach(card => {\n    if (currentSeq.length === 0 ||\n      currentSeq[currentSeq.length - 1].rank + 1 === card.rank) {\n      //theres no current sequence\n      //or the card does sequentially follows the curr seq\n      currentSeq.push(card);\n    } else {\n      // current sequence is broken, add it to the return list\n      sequences.push(currentSeq);\n\n      // current card is start of new sequence\n      currentSeq = [card];\n    }\n  });\n  return sequences;\n}\n\nfunction removeCardsFromPlayer(\n  player: Player,\n  cards: CardSequence\n): CardSequence {\n  cards.forEach((c) => {\n    const index = player.cards.indexOf(c);\n    if (index > -1) player.cards.splice(index, 1);\n    else throw new Error(`Player does not have card ${c}`);\n  });\n  return cards;\n}\n\nexport function transitionState(\n  current: GameState = undefined,\n  command: Play = undefined\n): GameState {\n  if (!current) {\n    // no previous state so generate a new game\n    const players = [new Player('A', 0), new Player('B', 1), new Player('C', 2), new Player('D', 3)];\n    const nextState: GameState = {\n      error: \"\",\n      discardPile: [],\n      currentPlayer: players[0],\n      playersIn: players,\n      playersOut: [],\n      message: `New Game! Waiting on ${players[0]}`,\n    };\n    dealCards(createDeck(), nextState.playersIn);\n    return nextState;\n  }\n\n  if (current.currentPlayer !== command.player) {\n    return {\n      ...current,\n      error: `It is not ${command.player.name}'s turn. It is ${current.currentPlayer.name}'s turn.`,\n    };\n  }\n\n  if (!command.cards) {\n    // no cards indicates Player passes and is out for remainder of the Round\n    const nextState = {\n      ...current,\n      error: \"\",\n      playersIn: current.playersIn.filter((p) => p !== command.player), //remove current player from round\n      playersOut: [...current.playersOut, command.player], //add player to list of passed players\n    };\n\n    // current player is the next player of the remaining players in the round\n    nextState.currentPlayer = getNextPlayer(command.player, [command.player, ...nextState.playersIn]);\n\n    nextState.message = `${command.player.name} passes. Waiting on ${nextState.currentPlayer.name}`;\n    return nextState;\n  }\n\n  if (\n    current.playersIn.length === 1 &&\n    getPlayersCards([...current.playersIn, ...current.playersOut]).length === 0\n  ) {\n    // only one player in the round and all cards played: game over\n    const nextState = {\n      ...current,\n      error: \"\",\n      discardPile: [\n        ...current.discardPile,\n        removeCardsFromPlayer(command.player, command.cards),\n      ],\n      playersIn: current.playersIn.filter((p) => p !== command.player),\n      playersOut: [...current.playersOut, command.player],\n      message: `${command.player.name} won!`,\n    };\n    return nextState;\n  }\n\n  if (current.playersIn.length === 1) {\n    // only one player in the round -> that player won round and can start next round w/ any sequence kind\n    const nextState = {\n      ...current,\n      error: \"\",\n      discardPile: [\n        ...current.discardPile,\n        removeCardsFromPlayer(command.player, command.cards),\n      ],\n      currentPlayer: command.player, //winner of round remains current player to lead round\n      playersIn: [current.currentPlayer, ...current.playersOut], //all players in at start of round\n      playersOut: [] as Player[], // no players are out at start of round\n    };\n    nextState.message = `${command.player.name} won round. Waiting on ${nextState.currentPlayer.name} to start new round.`;\n    return nextState;\n  }\n\n  // current player played a sequence, advance to next player\n  const nextState = {\n    ...current,\n    error: '',\n    discardPile: [...current.discardPile, removeCardsFromPlayer(command.player, command.cards)],\n    currentPlayer: getNextPlayer(command.player, current.playersIn),\n  };\n  nextState.message = `${current.currentPlayer} played. Waiting on ${nextState.currentPlayer}`\n\n  return nextState;\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}