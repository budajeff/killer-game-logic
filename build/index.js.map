{"version":3,"sources":["webpack://KillerGameLogic/webpack/universalModuleDefinition","webpack://KillerGameLogic/webpack/bootstrap","webpack://KillerGameLogic/webpack/runtime/define property getters","webpack://KillerGameLogic/webpack/runtime/hasOwnProperty shorthand","webpack://KillerGameLogic/webpack/runtime/make namespace object","webpack://KillerGameLogic/./src/lib/logic.ts"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Suit","Rank","CardSequenceKind","PlayerStatus","cardToString","card","rank","Two","Ace","King","Queen","Jack","Ten","Nine","Eight","Seven","Six","Five","Four","Three","getRankText","suit","getSuitText","cardSequenceToKind","cards","every","c","length","OneOfAKind","TwoOfAKind","ThreeOfAKind","FourOfAKind","Unknown","ofAKindSequenceToKind","RunOfThree","RunOfFour","RunOfFive","RunOfSix","RunOfSeven","RunOfEight","RunOfNine","RunOfTen","RunOfEleven","RunOfTwelve","RunOfThirteen","runSequenceToKind","cardSequenceToString","reduce","textList","index","PlayerKind","Play","player","undefined","Card","Hearts","Player","name","kind","AI","order","status","InRound","current","this","getActivePlayers","state","players","filter","p","getPassedPlayers","PassedRound","setCurrentPlayer","forEach","getCurrentPlayer","find","isGameOver","some","Discard","playerName","GameState","discardPile","message","error","orderByCardRank","a","b","orderByPlayerOrder","orderBy","orderByProp","asc","dealCards","deck","Error","array","randomIndex","currentIndex","Math","floor","random","shuffle","splice","enumKeys","keys","k","Number","isNaN","createDeck","push","getNextPlayer","sorted","sort","indexOf","findOfAKinds","currentSeq","sequences","shift","findRuns","seq","cardsCopy","currentRank","nextCard","nextCardIndex","findSequences","findSequencesByKind","removeCardsFromPlayer","cs","getMostRecentDiscard","transitionStateToHumanPlayer","onStateChanged","console","log","currentPlayer","transitionState","currentPlayerSequences","sequenceToBeat","command","Human","nextState","winners"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"KillerGameLogic\"] = factory();\n\telse\n\t\troot[\"KillerGameLogic\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"./index.css\";\n\nexport enum Suit {\n  Hearts = \"hearts\",\n  Diamonds = \"diamonds\",\n  Clubs = \"clubs\",\n  Spades = \"spades\",\n}\n\nfunction getSuitText(suit: Suit) {\n  switch (suit) {\n    case \"hearts\":\n      return \"\\u2665\";\n    case \"diamonds\":\n      return \"\\u2666\";\n    case \"clubs\":\n      return \"\\u2667\";\n    case \"spades\":\n      return \"\\u2660\";\n    default:\n      return \"?\";\n  }\n}\n\nfunction getRankText(rank: Rank) {\n  switch (rank) {\n    case Rank.Two:\n      return \"2\";\n    case Rank.Ace:\n      return \"A\";\n    case Rank.King:\n      return \"K\";\n    case Rank.Queen:\n      return \"Q\";\n    case Rank.Jack:\n      return \"J\";\n    case Rank.Ten:\n      return \"10\";\n    case Rank.Nine:\n      return \"9\";\n    case Rank.Eight:\n      return \"8\";\n    case Rank.Seven:\n      return \"7\";\n    case Rank.Six:\n      return \"6\";\n    case Rank.Five:\n      return \"5\";\n    case Rank.Four:\n      return \"4\";\n    case Rank.Three:\n      return \"3\";\n    default:\n      return \"?\";\n  }\n}\n\nexport function cardToString(card: Card) {\n  return getRankText(card.rank) + getSuitText(card.suit);\n}\n\nexport enum Rank {\n  Two = 13, //twos are high in this game\n  Ace = 12,\n  King = 11,\n  Queen = 10,\n  Jack = 9,\n  Ten = 8,\n  Nine = 7,\n  Eight = 6,\n  Seven = 5,\n  Six = 4,\n  Five = 3,\n  Four = 2,\n  Three = 1,\n}\n\nexport enum CardSequenceKind {\n  Unknown = \"unknown\",\n\n  OneOfAKind = \"one of a kind\",\n  TwoOfAKind = \"two of a kind\",\n  ThreeOfAKind = \"three of a kind\",\n  FourOfAKind = \"four of a kind\",\n\n  RunOfThree = \"run of three\",\n  RunOfFour = \"run of four\",\n  RunOfFive = \"run of five\",\n  RunOfSix = \"run of six\",\n  RunOfSeven = \"run of seven\",\n  RunOfEight = \"run of eight\",\n  RunOfNine = \"run of nine\",\n  RunOfTen = \"run of ten\",\n  RunOfEleven = \"run of eleven\",\n  RunOfTwelve = \"run of twelve\",\n  RunOfThirteen = \"run of thirteen\",\n\n  RunOfThreePairs = \"run of three pairs\",\n  RunOfFourPairs = \"run of four pairs\",\n  RunOfFivePairs = \"run of five pairs\",\n  RunOfSixPairs = \"run of six pairs\",\n\n  RunOfThreeTriples = \"run of three triples\",\n  RunOfFourTriples = \"run of four triples\",\n}\n\nexport function cardSequenceToKind(cards: CardSequence): CardSequenceKind {\n  if (cards.every((c) => c.rank === cards[0].rank)) {\n    return ofAKindSequenceToKind(cards.length);\n  } else {\n    return runSequenceToKind(cards.length);\n  }\n}\n\nexport function cardSequenceToString(cards: CardSequence): string {\n  return cards.reduce(\n    (textList, c, index) =>\n      (textList +=\n        cardToString(c) + (index === textList.length - 1 ? \"\" : \" \")),\n    \"\"\n  );\n}\n\nfunction ofAKindSequenceToKind(length: number): CardSequenceKind {\n  switch (length) {\n    case 1:\n      return CardSequenceKind.OneOfAKind;\n    case 2:\n      return CardSequenceKind.TwoOfAKind;\n    case 3:\n      return CardSequenceKind.ThreeOfAKind;\n    case 4:\n      return CardSequenceKind.FourOfAKind;\n    default:\n      return CardSequenceKind.Unknown;\n  }\n}\n\nfunction runSequenceToKind(length: number): CardSequenceKind {\n  //runs must be at least three cards long\n  switch (length) {\n    case 3:\n      return CardSequenceKind.RunOfThree;\n    case 4:\n      return CardSequenceKind.RunOfFour;\n    case 5:\n      return CardSequenceKind.RunOfFive;\n    case 6:\n      return CardSequenceKind.RunOfSix;\n    case 7:\n      return CardSequenceKind.RunOfSeven;\n    case 8:\n      return CardSequenceKind.RunOfEight;\n    case 9:\n      return CardSequenceKind.RunOfNine;\n    case 10:\n      return CardSequenceKind.RunOfTen;\n    case 11:\n      return CardSequenceKind.RunOfEleven;\n    case 12:\n      return CardSequenceKind.RunOfTwelve;\n    case 13:\n      return CardSequenceKind.RunOfThirteen;\n    default:\n      return CardSequenceKind.Unknown;\n  }\n}\n\nexport enum PlayerStatus {\n  InRound = \"in\",\n  PassedRound = \"passed\",\n}\n\nexport class Play {\n  /** @description falsy cards indicates player passes */\n  constructor(public player: Player, public cards: CardSequence = undefined) {}\n}\nexport class Card {\n  constructor(public rank: Rank = Rank.Ace, public suit: Suit = Suit.Hearts) {}\n}\n\n/**  */\nexport type CardSequence = Card[];\n\nexport type Deck = Card[];\nexport type DiscardPile = CardSequence[];\n\nexport enum PlayerKind {\n  Human = \"human\",\n  AI = \"ai\",\n}\nexport class Player {\n  constructor(\n    public name = \"player\",\n    public kind = PlayerKind.AI,\n    public order: number = 0,\n    public cards: Card[] = undefined,\n    public status = PlayerStatus.InRound,\n    public current = false\n  ) {}\n\n  public toString() {\n    return `Player ${this.name} with ${this?.cards?.length} cards remaining`;\n  }\n}\n\nexport function getActivePlayers(state: GameState) {\n  return state.players.filter((p) => p.status === PlayerStatus.InRound);\n}\nexport function getPassedPlayers(state: GameState) {\n  return state.players.filter((p) => p.status === PlayerStatus.PassedRound);\n}\nexport function setCurrentPlayer(state: GameState, player: Player) {\n  state.players.forEach((p) => (p.current = false));\n  player.current = true;\n}\nexport function getCurrentPlayer(state: GameState):Player|undefined {\n  return state.players.find((p) => p.current);\n}\nexport function isGameOver(state: GameState) {\n  return state.players.some((p) => p.cards.length === 0);\n}\n\nexport class Discard {\n  constructor(public playerName: string, public cards: CardSequence) {}\n}\nexport class GameState {\n  constructor(\n    public players: Player[],\n    public discardPile: Discard[],\n    public message: string,\n    public error: string\n  ) {}\n}\n\nfunction orderByCardRank(a: Card, b: Card) {\n  if (a.rank > b.rank) return 1;\n  else if (a.rank < b.rank) return -1;\n  return 0;\n}\n\nexport function orderByPlayerOrder(a: Player, b: Player) {\n  if (a.order > b.order) return 1;\n  else if (a.order < b.order) return -1;\n  return 0;\n}\n\nexport function orderBy(orderByProp: string, asc = true) {\n  return (a: any, b: any) => {\n    if (a[orderByProp] > b[orderByProp]) return asc ? 1 : -1;\n    else if (a[orderByProp] < b[orderByProp]) return asc ? -1 : 1;\n    return 0;\n  };\n}\n\nfunction shuffle(array: any[]) {\n  let currentIndex = array.length;\n  let randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\nfunction dealCards(deck: Deck, players: Player[]) {\n  if (players.length > 4 || players.length < 2) {\n    throw new Error(\"invalid Player length\");\n  }\n  shuffle(deck);\n  players.forEach((player) => (player.cards = deck.splice(0, 13)));\n}\n\nfunction enumKeys<\n  O extends Record<string, unknown>,\n  K extends keyof O = keyof O\n>(obj: O): K[] {\n  return Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[];\n}\n\nexport function createDeck(): Deck {\n  const deck = [];\n  for (const suit of enumKeys(Suit)) {\n    for (const rank of enumKeys(Rank)) {\n      deck.push({ suit: Suit[suit], rank: Rank[rank] });\n    }\n  }\n  return deck;\n}\n\nexport function getPlayersCards(players: Player[]) {\n  return players\n    .map((p) => p.cards)\n    .reduce((all, current) => [...all, ...current]);\n}\n\n/** Get the next player who is still in the current round (who has not Passed) */\nexport function getNextPlayer(current: Player, players: Player[]) {\n  const sorted = [...players].sort(orderByPlayerOrder);\n  let index = sorted.indexOf(current);\n  do {\n    if (index === players.length - 1) {\n      index = 0; //loop back to beginning\n    } else {\n      index = index + 1;\n    }\n    if (sorted[index].status === PlayerStatus.InRound) {\n      return sorted[index]; //return the next player who's still in this round\n    }\n  } while (sorted[index] !== current); //done once we're back at the current player\n  return undefined; //perhaps no one is left in the round?\n}\n\nexport function findOfAKinds(cards: CardSequence): CardSequence[] {\n  const sorted = [...cards].sort(orderByCardRank);\n  let currentSeq: CardSequence = [];\n  const sequences: CardSequence[] = [currentSeq];\n  while (sorted.length > 0) {\n    const card = sorted.shift();\n    if (\n      currentSeq.length === 0 ||\n      currentSeq[currentSeq.length - 1].rank === card.rank\n    ) {\n      currentSeq.push(card);\n    } else {\n      currentSeq = [card];\n      sequences.push(currentSeq);\n    }\n  }\n  return sequences;\n}\n\nexport function findRuns(cards: CardSequence): CardSequence[] {\n    const sequences:CardSequence[] = [];\n\n    cards.forEach(card => { //assume each card could be the start of a run\n        const seq = [card];\n        const cardsCopy = [...cards];\n        let currentRank = card.rank;\n        while(cardsCopy.find(c => c.rank === currentRank + 1)) {\n            const nextCard = cardsCopy.find(c => c.rank === currentRank + 1);\n            const nextCardIndex = cardsCopy.indexOf(nextCard);\n            seq.push(cardsCopy.splice(nextCardIndex,1)[0]);\n            currentRank++;\n        }\n        if(seq.length > 2) { //runs must be at least three cards long\n            sequences.push(seq); \n        }\n    });\n    return sequences;\n}\n\nexport function findRunsOLD(cards: CardSequence): CardSequence[] {\n  const sorted = [...cards].sort(orderByCardRank);\n  let currentSeq: CardSequence = [];\n  const sequences: CardSequence[] = [currentSeq];\n  sorted.forEach((card) => {\n    if (\n      currentSeq.length === 0 ||\n      currentSeq[currentSeq.length - 1].rank + 1 === card.rank\n    ) {\n      //theres no current sequence\n      //or the card does sequentially follows the curr seq\n      currentSeq.push(card);\n    } else {\n      // current sequence is broken, add it to the return list\n      sequences.push(currentSeq);\n\n      // current card is start of new sequence\n      currentSeq = [card];\n    }\n  });\n  return sequences;\n}\nexport function findSequences(cards: CardSequence) {\n  return [...findRuns(cards), ...findOfAKinds(cards)];\n}\n\nexport function findSequencesByKind(\n  cards: CardSequence,\n  kind: CardSequenceKind\n): CardSequence[] {\n  switch (kind) {\n    case CardSequenceKind.OneOfAKind:\n      return findOfAKinds(cards).filter((c) => c.length === 1);\n    case CardSequenceKind.TwoOfAKind:\n      return findOfAKinds(cards).filter((c) => c.length === 2);\n    case CardSequenceKind.ThreeOfAKind:\n      return findOfAKinds(cards).filter((c) => c.length === 3);\n    case CardSequenceKind.FourOfAKind:\n      return findOfAKinds(cards).filter((c) => c.length === 4);\n    case CardSequenceKind.RunOfThree:\n      return findRuns(cards).filter((c) => c.length === 3);\n    case CardSequenceKind.RunOfFour:\n      return findRuns(cards).filter((c) => c.length === 4);\n    case CardSequenceKind.RunOfFive:\n      return findRuns(cards).filter((c) => c.length === 5);\n    case CardSequenceKind.RunOfSix:\n      return findRuns(cards).filter((c) => c.length === 6);\n    case CardSequenceKind.RunOfSeven:\n      return findRuns(cards).filter((c) => c.length === 7);\n    case CardSequenceKind.RunOfEight:\n      return findRuns(cards).filter((c) => c.length === 8);\n    case CardSequenceKind.RunOfNine:\n      return findRuns(cards).filter((c) => c.length === 9);\n    case CardSequenceKind.RunOfTen:\n      return findRuns(cards).filter((c) => c.length === 10);\n    case CardSequenceKind.RunOfEleven:\n      return findRuns(cards).filter((c) => c.length === 11);\n    case CardSequenceKind.RunOfTwelve:\n      return findRuns(cards).filter((c) => c.length === 12);\n    case CardSequenceKind.RunOfThirteen:\n      return findRuns(cards).filter((c) => c.length === 13);\n    default:\n      return [];\n  }\n}\n\nfunction removeCardsFromPlayer(\n  player: Player,\n  cards: CardSequence\n): CardSequence {\n  cards.forEach((cs) => {\n    const card = player.cards.find(\n      (c) => c.rank === cs.rank && c.suit === cs.suit\n    );\n    const index = player.cards.indexOf(card);\n    if (index > -1) player.cards.splice(index, 1);\n    else throw new Error(`Player does not have card ${cardToString(cs)}`);\n  });\n  return cards;\n}\n\nfunction getMostRecentDiscard(state: GameState): Discard {\n  return state.discardPile.length === 0\n    ? undefined\n    : state.discardPile[state.discardPile.length - 1];\n}\n\n/** Advances the game state until a human player's command is required (or the game's over or there's an error)  */\nexport function transitionStateToHumanPlayer(\n  state: GameState,\n  onStateChanged: (state: GameState) => void = (state) => {\n    console.log(state);\n  }\n): GameState {\n  while (\n    !isGameOver(state) &&\n    !state.error &&\n    getCurrentPlayer(state).kind === PlayerKind.AI\n  ) {\n    const currentPlayer = getCurrentPlayer(state);\n\n    if (state.discardPile.length === 0) {\n      // first play of the game\n      // current play should play their longest sequence\n      const sequences = findSequences(currentPlayer.cards);\n      sequences.sort(orderBy(\"length\", false));\n      state = transitionState(state, new Play(currentPlayer, sequences[0]));\n      onStateChanged(state);\n    } else if (currentPlayer.name === getMostRecentDiscard(state).playerName) {\n      // current player was last to discard which means they won the round\n      // can start next round w/ any discard\n      const currentPlayerSequences = findSequences(currentPlayer.cards).sort(\n        orderBy(\"length\", false)\n      );\n      state = transitionState(\n        state,\n        new Play(currentPlayer, currentPlayerSequences[0])\n      );\n      onStateChanged(state);\n    } else {\n      const sequenceToBeat = cardSequenceToKind(\n        getMostRecentDiscard(state).cards\n      );\n      const currentPlayerSequences = findSequencesByKind(\n        currentPlayer.cards,\n        sequenceToBeat\n      );\n\n      if (currentPlayerSequences.length === 0) {\n        state = transitionState(state, new Play(currentPlayer, [])); //pass\n      } else {\n        state = transitionState(\n          state,\n          new Play(currentPlayer, currentPlayerSequences[0])\n        ); //play\n      }\n      onStateChanged(state);\n    }\n  }\n  return state;\n}\n\nexport function transitionState(\n  state: GameState = undefined,\n  command: Play = undefined\n): GameState {\n  if (!state) {\n    // no previous state so generate a new game\n    const players = [\n      new Player(\"A\", PlayerKind.Human, 0),\n      new Player(\"B\", PlayerKind.AI, 1),\n      new Player(\"C\", PlayerKind.AI, 2),\n      new Player(\"D\", PlayerKind.AI, 3),\n    ];\n    const nextState: GameState = {\n      players,\n      error: \"\",\n      discardPile: [],\n      message: `New Game! Waiting on ${players[0]}`,\n    };\n    setCurrentPlayer(nextState, nextState.players[0]);\n    dealCards(createDeck(), nextState.players);\n    nextState.players[0].current = true;\n    return nextState;\n  }\n\n  // verify card sequence\n  if (command?.cards?.length > 0 && cardSequenceToKind(command.cards) === CardSequenceKind.Unknown) {\n    return {\n      ...state,\n      message: \"\",\n      error: `Unknown card sequence: ${cardSequenceToString(command.cards)}`,\n    };\n  }\n\n  // verify current player\n  if (getCurrentPlayer(state) !== command.player) {\n    return {\n      ...state,\n      error: `It is not ${command.player.name}'s turn. It is ${\n        getCurrentPlayer(state).name\n      }'s turn.`,\n    };\n  }\n\n  //verify game is not over\n  const winners = state.players.filter((p) => p.cards.length === 0);\n  if (winners.length > 0) {\n    return {\n      ...state,\n      error: `${winners[0].name} won this game.`,\n    };\n  }\n\n  // no cards indicates Player passes and is out for remainder of the Round\n  if (!command.cards || command.cards.length === 0) {\n    command.player.status = PlayerStatus.PassedRound;\n    const nextState = {\n      ...state,\n      error: \"\",\n    };\n\n    // current player is the next player of the remaining players in the round\n    setCurrentPlayer(\n      nextState,\n      getNextPlayer(command.player, nextState.players)\n    );\n\n    nextState.message = `${command.player.name} passes. Waiting on ${\n      getCurrentPlayer(nextState).name\n    }`;\n    return nextState;\n  }\n\n  if (getActivePlayers(state).length === 1) {\n    // only one player in the round -> that player won round and can start next round w/ any sequence kind\n    //winner of round remains current player to lead round\n    const nextState: GameState = {\n      ...state,\n      error: \"\",\n      discardPile: [\n        ...state.discardPile,\n        new Discard(\n          command.player.name,\n          removeCardsFromPlayer(command.player, command.cards)\n        ),\n      ],\n    };\n    nextState.players.forEach((p) => (p.status = PlayerStatus.InRound));\n    nextState.message = `${command.player.name} played ${cardSequenceToKind(\n      command.player.cards\n    )} and won the round. Waiting on ${\n      getCurrentPlayer(nextState).name\n    } to start new round.`;\n    return nextState;\n  }\n\n  // current player played a sequence, advance to next player\n  const nextState: GameState = {\n    ...state,\n    error: \"\",\n    discardPile: [\n      ...state.discardPile,\n      new Discard(\n        command.player.name,\n        removeCardsFromPlayer(command.player, command.cards)\n      ),\n    ],\n  };\n\n  // check for end game after removing cards from the current player\n  if (command.player.cards.length === 0) {\n    nextState.message = `${command.player.name} played, has no cards left, and is the winner. `;\n  } else {\n    setCurrentPlayer(nextState, getNextPlayer(command.player, state.players));\n    nextState.message = `${command.player.name} played ${cardSequenceToKind(\n      command.player.cards\n    )}. Waiting on ${getCurrentPlayer(nextState)}`;\n  }\n  return nextState;\n}\n"],"sourceRoot":""}