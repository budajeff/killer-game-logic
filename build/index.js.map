{"version":3,"sources":["webpack://KillerGameLogic/webpack/universalModuleDefinition","webpack://KillerGameLogic/webpack/bootstrap","webpack://KillerGameLogic/./src/lib/logic.ts","webpack://KillerGameLogic/webpack/runtime/define property getters","webpack://KillerGameLogic/webpack/runtime/hasOwnProperty shorthand","webpack://KillerGameLogic/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","self","Suit","Rank","CardSequenceKind","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Player","name","order","cards","undefined","this","length","orderByPlayerOrder","a","b","dealCards","deck","players","Error","array","randomIndex","currentIndex","Math","floor","random","shuffle","forEach","player","splice","enumKeys","keys","filter","k","Number","isNaN","createDeck","suit","rank","push","getPlayersCards","map","p","reduce","all","current","getNextPlayer","index","sort","indexOf","removeCardsFromPlayer","c","transitionState","command","nextState","error","discardPile","currentPlayer","playersIn","playersOut","message"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"KillerGameLogic\"] = factory();\n\telse\n\t\troot[\"KillerGameLogic\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","import \"./index.css\";\n\nexport enum Suit {\n  Hearts = \"hearts\",\n  Diamonds = \"diamonds\",\n  Clubs = \"clubs\",\n  Spades = \"spades\",\n}\n\nexport enum Rank {\n  Two = 13, //twos are high in this game\n  Ace = 12,\n  King = 11,\n  Queen = 10,\n  Jack = 9,\n  Ten = 8,\n  Nine = 7,\n  Eight = 6,\n  Seven = 5,\n  Six = 4,\n  Five = 3,\n  Four = 2,\n  Three = 1,\n}\n\nexport enum CardSequenceKind {\n  None = \"none\",\n\n  OneOfAKind = \"one of a kind\",\n  TwoOfAKind = \"two of a kind\",\n  ThreeOfAKind = \"three of a kind\",\n  FourOfAKind = \"four of a kind\",\n\n  RunOfThree = \"run of three\",\n  RunOfFour = \"run of four\",\n  RunOfFive = \"run of five\",\n  RunOfSix = \"run of six\",\n  RunOfSeven = \"run of seven\",\n  RunOfEight = \"run of eight\",\n  RunOfNine = \"run of nine\",\n  RunOfTen = \"run of ten\",\n  RunOfEleven = \"run of eleven\",\n  RunOfTwelve = \"run of twelve\",\n  RunOfThirteen = \"run of thirteen\",\n\n  RunOfThreePairs = \"run of three pairs\",\n  RunOfFourPairs = \"run of four pairs\",\n  RunOfFivePairs = \"run of five pairs\",\n  RunOfSixPairs = \"run of six pairs\",\n\n  RunOfThreeTriples = \"run of three triples\",\n  RunOfFourTriples = \"run of four triples\",\n}\n\nexport class Play {\n  /** @description falsy cards indicates player passes */\n  constructor(public player: Player, public cards: CardSequence = undefined) {}\n}\nexport class Card {\n  constructor(public rank: Rank = Rank.Ace, public suit: Suit = Suit.Hearts) {}\n\n  public toString() {\n    return `${this.rank} of ${this.suit}`;\n  }\n}\n\n/**  */\nexport type CardSequence = Card[];\n\nexport type Deck = Card[];\nexport type DiscardPile = Card[];\nexport class Player {\n  constructor(\n    public name = \"player\",\n    public order: number = 0,\n    public cards: Card[] = undefined\n  ) {}\n\n  public toString() {\n    return `Player ${this.name} with ${this?.cards?.length} cards remaining`;\n  }\n}\nexport class Round {\n  constructor(\n    public currentPlayer: Player,\n    public activePlayers: Player[],\n    public outPlayers: Player[],\n    public cards: Card[]\n  ) {}\n}\n\nexport class GameState {\n  constructor(\n    public currentPlayer: Player,\n    public discardPile: CardSequence[],\n    public playersIn: Player[],\n    public playersOut: Player[],\n    public message: string,\n    public error: string\n  ) {}\n}\n\nfunction orderByCardRank(a: Card, b: Card) {\n  if (a.rank > b.rank) return 1;\n  else if (a.rank < b.rank) return -1;\n  return 0;\n}\n\nfunction orderByPlayerOrder(a: Player, b: Player) {\n  if (a.order > b.order) return 1;\n  else if (a.order < b.order) return -1;\n  return 0;\n}\n\nexport function orderBy(orderByProp: string, asc = true) {\n  return (a: any, b: any) => {\n    if (a[orderByProp] > b[orderByProp]) return asc ? 1 : -1;\n    else if (a[orderByProp] < b[orderByProp]) return asc ? -1 : 1;\n    return 0;\n  };\n}\n\nfunction shuffle(array: any[]) {\n  let currentIndex = array.length;\n  let randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\nfunction dealCards(deck: Deck, players: Player[]) {\n  if (players.length > 4 || players.length < 2) {\n    throw new Error(\"invalid Player length\");\n  }\n  shuffle(deck);\n  players.forEach((player) => (player.cards = deck.splice(0, 13)));\n}\n\nfunction enumKeys<\n  O extends Record<string, unknown>,\n  K extends keyof O = keyof O\n>(obj: O): K[] {\n  return Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[];\n}\n\nexport function createDeck(): Deck {\n  const deck = [];\n  for (const suit of enumKeys(Suit)) {\n    for (const rank of enumKeys(Rank)) {\n      deck.push({ suit: Suit[suit], rank: Rank[rank] });\n    }\n  }\n  return deck;\n}\n\nexport function getPlayersCards(players: Player[]) {\n  return players\n    .map((p) => p.cards)\n    .reduce((all, current) => [...all, ...current]);\n}\n\nexport function getNextPlayer(current: Player, players: Player[]) {\n  const sorted = [...players].sort(orderByPlayerOrder);\n  const index = sorted.indexOf(current);\n  if (index === -1) throw new Error(\"Player not found\");\n  return index === players.length - 1 ? players[0] : players[index + 1];\n}\n\nexport function findOfAKinds(cards: CardSequence): CardSequence[] {\n  const sorted = [...cards].sort(orderByCardRank);\n  let currentSeq: CardSequence = [];\n  const sequences: CardSequence[] = [currentSeq];\n  while (sorted.length > 0) {\n    const card = sorted.shift();\n    if (\n      currentSeq.length === 0 ||\n      currentSeq[currentSeq.length - 1].rank === card.rank\n    ) {\n      currentSeq.push(card);\n    } else {\n      currentSeq = [card];\n      sequences.push(currentSeq);\n    }\n  }\n  return sequences;\n}\n\nexport function findRuns(cards: CardSequence): CardSequence[] {\n  const sorted = [...cards].sort(orderByCardRank);\n  let currentSeq: CardSequence = [];\n  const sequences: CardSequence[] = [currentSeq];\n  sorted.forEach((card) => {\n    if (\n      currentSeq.length === 0 ||\n      currentSeq[currentSeq.length - 1].rank + 1 === card.rank\n    ) {\n      //theres no current sequence\n      //or the card does sequentially follows the curr seq\n      currentSeq.push(card);\n    } else {\n      // current sequence is broken, add it to the return list\n      sequences.push(currentSeq);\n\n      // current card is start of new sequence\n      currentSeq = [card];\n    }\n  });\n  return sequences;\n}\n\nfunction removeCardsFromPlayer(\n  player: Player,\n  cards: CardSequence\n): CardSequence {\n  cards.forEach((c) => {\n    const index = player.cards.indexOf(c);\n    if (index > -1) player.cards.splice(index, 1);\n    else throw new Error(`Player does not have card ${c}`);\n  });\n  return cards;\n}\n\nexport function transitionState(\n  current: GameState = undefined,\n  command: Play = undefined\n): GameState {\n  if (!current) {\n    // no previous state so generate a new game\n    const players = [\n      new Player(\"A\", 0),\n      new Player(\"B\", 1),\n      new Player(\"C\", 2),\n      new Player(\"D\", 3),\n    ];\n    const nextState: GameState = {\n      error: \"\",\n      discardPile: [],\n      currentPlayer: players[0],\n      playersIn: players,\n      playersOut: [],\n      message: `New Game! Waiting on ${players[0]}`,\n    };\n    dealCards(createDeck(), nextState.playersIn);\n    return nextState;\n  }\n\n  if (current.currentPlayer !== command.player) {\n    return {\n      ...current,\n      error: `It is not ${command.player.name}'s turn. It is ${current.currentPlayer.name}'s turn.`,\n    };\n  }\n\n  if (!command.cards) {\n    // no cards indicates Player passes and is out for remainder of the Round\n    const nextState = {\n      ...current,\n      error: \"\",\n      playersIn: current.playersIn.filter((p) => p !== command.player), //remove current player from round\n      playersOut: [...current.playersOut, command.player], //add player to list of passed players\n    };\n\n    // current player is the next player of the remaining players in the round\n    nextState.currentPlayer = getNextPlayer(command.player, [\n      command.player,\n      ...nextState.playersIn,\n    ]);\n\n    nextState.message = `${command.player.name} passes. Waiting on ${nextState.currentPlayer.name}`;\n    return nextState;\n  }\n\n  if (\n    current.playersIn.length === 1 &&\n    getPlayersCards([...current.playersIn, ...current.playersOut]).length === 0\n  ) {\n    // only one player in the round and all cards played: game over\n    const nextState = {\n      ...current,\n      error: \"\",\n      discardPile: [\n        ...current.discardPile,\n        removeCardsFromPlayer(command.player, command.cards),\n      ],\n      playersIn: current.playersIn.filter((p) => p !== command.player),\n      playersOut: [...current.playersOut, command.player],\n      message: `${command.player.name} won!`,\n    };\n    return nextState;\n  }\n\n  if (current.playersIn.length === 1) {\n    // only one player in the round -> that player won round and can start next round w/ any sequence kind\n    const nextState = {\n      ...current,\n      error: \"\",\n      discardPile: [\n        ...current.discardPile,\n        removeCardsFromPlayer(command.player, command.cards),\n      ],\n      currentPlayer: command.player, //winner of round remains current player to lead round\n      playersIn: [current.currentPlayer, ...current.playersOut], //all players in at start of round\n      playersOut: [] as Player[], // no players are out at start of round\n    };\n    nextState.message = `${command.player.name} won round. Waiting on ${nextState.currentPlayer.name} to start new round.`;\n    return nextState;\n  }\n\n  // current player played a sequence, advance to next player\n  const nextState = {\n    ...current,\n    error: \"\",\n    discardPile: [\n      ...current.discardPile,\n      removeCardsFromPlayer(command.player, command.cards),\n    ],\n    currentPlayer: getNextPlayer(command.player, current.playersIn),\n  };\n  nextState.message = `${current.currentPlayer} played. Waiting on ${nextState.currentPlayer}`;\n\n  return nextState;\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}