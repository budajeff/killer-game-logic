{"version":3,"sources":["webpack://KillerGameLogic/webpack/universalModuleDefinition","webpack://KillerGameLogic/webpack/bootstrap","webpack://KillerGameLogic/webpack/runtime/define property getters","webpack://KillerGameLogic/webpack/runtime/hasOwnProperty shorthand","webpack://KillerGameLogic/webpack/runtime/make namespace object","webpack://KillerGameLogic/./src/lib/logic.ts"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Suit","Rank","CardSequenceKind","PlayerStatus","cardToString","card","rank","Two","Ace","King","Queen","Jack","Ten","Nine","Eight","Seven","Six","Five","Four","Three","getRankText","suit","getSuitText","Play","player","cards","undefined","Card","Hearts","this","Player","name","order","status","InRound","current","length","getActivePlayers","state","players","filter","p","getPassedPlayers","PassedRound","setCurrentPlayer","forEach","getCurrentPlayer","GameState","discardPile","message","error","orderByCardRank","a","b","orderByPlayerOrder","orderBy","orderByProp","asc","dealCards","deck","Error","array","randomIndex","currentIndex","Math","floor","random","shuffle","splice","enumKeys","keys","k","Number","isNaN","createDeck","push","getPlayersCards","map","reduce","all","getNextPlayer","index","sort","indexOf","findOfAKinds","sorted","currentSeq","sequences","shift","findRuns","removeCardsFromPlayer","c","transitionState","command","nextState"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"KillerGameLogic\"] = factory();\n\telse\n\t\troot[\"KillerGameLogic\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"./index.css\";\n\nexport enum Suit {\n  Hearts = \"hearts\",\n  Diamonds = \"diamonds\",\n  Clubs = \"clubs\",\n  Spades = \"spades\",\n}\n\nfunction getSuitText(suit: Suit) {\n  switch (suit) {\n    case \"hearts\":\n      return \"\\u2665\";\n    case \"diamonds\":\n      return \"\\u2666\";\n    case \"clubs\":\n      return \"\\u2667\";\n    case \"spades\":\n      return \"\\u2660\";\n    default:\n      return \"?\";\n  }\n}\n\nfunction getRankText(rank: Rank) {\n  switch (rank) {\n    case Rank.Two:\n      return \"2\";\n    case Rank.Ace:\n      return \"A\";\n    case Rank.King:\n      return \"K\";\n    case Rank.Queen:\n      return \"Q\";\n    case Rank.Jack:\n      return \"J\";\n    case Rank.Ten:\n      return \"10\";\n    case Rank.Nine:\n      return \"9\";\n    case Rank.Eight:\n      return \"8\";\n    case Rank.Seven:\n      return \"7\";\n    case Rank.Six:\n      return \"6\";\n    case Rank.Five:\n      return \"5\";\n    case Rank.Four:\n      return \"4\";\n    case Rank.Three:\n      return \"3\";\n    default:\n      return \"?\";\n  }\n}\n\nexport function cardToString(card: Card) {\n  return getRankText(card.rank) + getSuitText(card.suit);\n}\n\nexport enum Rank {\n  Two = 13, //twos are high in this game\n  Ace = 12,\n  King = 11,\n  Queen = 10,\n  Jack = 9,\n  Ten = 8,\n  Nine = 7,\n  Eight = 6,\n  Seven = 5,\n  Six = 4,\n  Five = 3,\n  Four = 2,\n  Three = 1,\n}\n\nexport enum CardSequenceKind {\n  None = \"none\",\n\n  OneOfAKind = \"one of a kind\",\n  TwoOfAKind = \"two of a kind\",\n  ThreeOfAKind = \"three of a kind\",\n  FourOfAKind = \"four of a kind\",\n\n  RunOfThree = \"run of three\",\n  RunOfFour = \"run of four\",\n  RunOfFive = \"run of five\",\n  RunOfSix = \"run of six\",\n  RunOfSeven = \"run of seven\",\n  RunOfEight = \"run of eight\",\n  RunOfNine = \"run of nine\",\n  RunOfTen = \"run of ten\",\n  RunOfEleven = \"run of eleven\",\n  RunOfTwelve = \"run of twelve\",\n  RunOfThirteen = \"run of thirteen\",\n\n  RunOfThreePairs = \"run of three pairs\",\n  RunOfFourPairs = \"run of four pairs\",\n  RunOfFivePairs = \"run of five pairs\",\n  RunOfSixPairs = \"run of six pairs\",\n\n  RunOfThreeTriples = \"run of three triples\",\n  RunOfFourTriples = \"run of four triples\",\n}\n\nexport enum PlayerStatus {\n  InRound = \"in\",\n  PassedRound = \"passed\",\n}\n\nexport class Play {\n  /** @description falsy cards indicates player passes */\n  constructor(public player: Player, public cards: CardSequence = undefined) {}\n}\nexport class Card {\n  constructor(public rank: Rank = Rank.Ace, public suit: Suit = Suit.Hearts) {}\n\n  public toString() {\n    return `${this.rank} of ${this.suit}`;\n  }\n}\n\n/**  */\nexport type CardSequence = Card[];\n\nexport type Deck = Card[];\nexport type DiscardPile = CardSequence[];\nexport class Player {\n  constructor(\n    public name = \"player\",\n    public order: number = 0,\n    public cards: Card[] = undefined,\n    public status: PlayerStatus = PlayerStatus.InRound,\n    public current = false\n  ) {}\n\n  public toString() {\n    return `Player ${this.name} with ${this?.cards?.length} cards remaining`;\n  }\n}\n\nexport function getActivePlayers(state: GameState) {\n  return state.players.filter((p) => p.status === PlayerStatus.InRound);\n}\nexport function getPassedPlayers(state: GameState) {\n  return state.players.filter((p) => p.status === PlayerStatus.PassedRound);\n}\nexport function setCurrentPlayer(state: GameState, player: Player) {\n  state.players.forEach((p) => (p.current = false));\n  player.current = true;\n}\nexport function getCurrentPlayer(state: GameState) {\n  return state.players.filter((p) => p.current)[0];\n}\nexport class GameState {\n  constructor(\n    public players: Player[],\n    public discardPile: CardSequence[],\n    public message: string,\n    public error: string\n  ) {}\n}\n\nfunction orderByCardRank(a: Card, b: Card) {\n  if (a.rank > b.rank) return 1;\n  else if (a.rank < b.rank) return -1;\n  return 0;\n}\n\nfunction orderByPlayerOrder(a: Player, b: Player) {\n  if (a.order > b.order) return 1;\n  else if (a.order < b.order) return -1;\n  return 0;\n}\n\nexport function orderBy(orderByProp: string, asc = true) {\n  return (a: any, b: any) => {\n    if (a[orderByProp] > b[orderByProp]) return asc ? 1 : -1;\n    else if (a[orderByProp] < b[orderByProp]) return asc ? -1 : 1;\n    return 0;\n  };\n}\n\nfunction shuffle(array: any[]) {\n  let currentIndex = array.length;\n  let randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\nfunction dealCards(deck: Deck, players: Player[]) {\n  if (players.length > 4 || players.length < 2) {\n    throw new Error(\"invalid Player length\");\n  }\n  shuffle(deck);\n  players.forEach((player) => (player.cards = deck.splice(0, 13)));\n}\n\nfunction enumKeys<\n  O extends Record<string, unknown>,\n  K extends keyof O = keyof O\n>(obj: O): K[] {\n  return Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[];\n}\n\nexport function createDeck(): Deck {\n  const deck = [];\n  for (const suit of enumKeys(Suit)) {\n    for (const rank of enumKeys(Rank)) {\n      deck.push({ suit: Suit[suit], rank: Rank[rank] });\n    }\n  }\n  return deck;\n}\n\nexport function getPlayersCards(players: Player[]) {\n  return players\n    .map((p) => p.cards)\n    .reduce((all, current) => [...all, ...current]);\n}\n\nexport function getNextPlayer(current: Player, players: Player[]) {\n  const sorted = [...players].sort(orderByPlayerOrder);\n  const index = sorted.indexOf(current);\n  if (index === -1) throw new Error(\"Player not found\");\n  return index === players.length - 1 ? players[0] : players[index + 1];\n}\n\nexport function findOfAKinds(cards: CardSequence): CardSequence[] {\n  const sorted = [...cards].sort(orderByCardRank);\n  let currentSeq: CardSequence = [];\n  const sequences: CardSequence[] = [currentSeq];\n  while (sorted.length > 0) {\n    const card = sorted.shift();\n    if (\n      currentSeq.length === 0 ||\n      currentSeq[currentSeq.length - 1].rank === card.rank\n    ) {\n      currentSeq.push(card);\n    } else {\n      currentSeq = [card];\n      sequences.push(currentSeq);\n    }\n  }\n  return sequences;\n}\n\nexport function findRuns(cards: CardSequence): CardSequence[] {\n  const sorted = [...cards].sort(orderByCardRank);\n  let currentSeq: CardSequence = [];\n  const sequences: CardSequence[] = [currentSeq];\n  sorted.forEach((card) => {\n    if (\n      currentSeq.length === 0 ||\n      currentSeq[currentSeq.length - 1].rank + 1 === card.rank\n    ) {\n      //theres no current sequence\n      //or the card does sequentially follows the curr seq\n      currentSeq.push(card);\n    } else {\n      // current sequence is broken, add it to the return list\n      sequences.push(currentSeq);\n\n      // current card is start of new sequence\n      currentSeq = [card];\n    }\n  });\n  return sequences;\n}\n\nfunction removeCardsFromPlayer(\n  player: Player,\n  cards: CardSequence\n): CardSequence {\n  cards.forEach((c) => {\n    const index = player.cards.indexOf(c);\n    if (index > -1) player.cards.splice(index, 1);\n    else throw new Error(`Player does not have card ${c}`);\n  });\n  return cards;\n}\n\nexport function transitionState(\n  state: GameState = undefined,\n  command: Play = undefined\n): GameState {\n  if (!state) {\n    // no previous state so generate a new game\n    const players = [\n      new Player(\"A\", 0),\n      new Player(\"B\", 1),\n      new Player(\"C\", 2),\n      new Player(\"D\", 3),\n    ];\n    const nextState: GameState = {\n      players,\n      error: \"\",\n      discardPile: [],\n      message: `New Game! Waiting on ${players[0]}`,\n    };\n    setCurrentPlayer(nextState, nextState.players[0]);\n    dealCards(createDeck(), nextState.players);\n    nextState.players[0].current = true;\n    return nextState;\n  }\n\n  if (getCurrentPlayer(state) !== command.player) {\n    return {\n      ...state,\n      error: `It is not ${command.player.name}'s turn. It is ${\n        getCurrentPlayer(state).name\n      }'s turn.`,\n    };\n  }\n\n  if (!command.cards) {\n    // no cards indicates Player passes and is out for remainder of the Round\n    command.player.status = PlayerStatus.PassedRound;\n    const nextState = {\n      ...state,\n      error: \"\",\n    };\n\n    // current player is the next player of the remaining players in the round\n    setCurrentPlayer(\n      nextState,\n      getNextPlayer(command.player, nextState.players)\n    );\n\n    nextState.message = `${command.player.name} passes. Waiting on ${\n      getCurrentPlayer(nextState).name\n    }`;\n    return nextState;\n  }\n\n  if (\n    getActivePlayers(state).length === 1 &&\n    getPlayersCards(state.players).length === 0\n  ) {\n    // only one player in the round and all cards played: game over\n    const nextState = {\n      ...state,\n      error: \"\",\n      discardPile: [\n        ...state.discardPile,\n        removeCardsFromPlayer(command.player, command.cards),\n      ],\n      message: `${command.player.name} won!`,\n    };\n    return nextState;\n  }\n\n  if (getActivePlayers(state).length === 1) {\n    // only one player in the round -> that player won round and can start next round w/ any sequence kind\n    //winner of round remains current player to lead round\n    const nextState: GameState = {\n      ...state,\n      error: \"\",\n      discardPile: [\n        ...state.discardPile,\n        removeCardsFromPlayer(command.player, command.cards),\n      ],\n    };\n    nextState.message = `${command.player.name} won round. Waiting on ${\n      getCurrentPlayer(nextState).name\n    } to start new round.`;\n    return nextState;\n  }\n\n  // current player played a sequence, advance to next player\n  const nextState = {\n    ...state,\n    error: \"\",\n    discardPile: [\n      ...state.discardPile,\n      removeCardsFromPlayer(command.player, command.cards),\n    ],\n  };\n  setCurrentPlayer(nextState, getNextPlayer(command.player, state.players));\n  nextState.message = `${getCurrentPlayer(\n    state\n  )} played. Waiting on ${getCurrentPlayer(nextState)}`;\n\n  return nextState;\n}\n"],"sourceRoot":""}